// Code generated by MockGen. DO NOT EDIT.
// Source: deployer/deployer.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	models "github.com/crossedbot/matryoshka/pkg/deployer/models"
	types "github.com/docker/docker/api/types"
	container "github.com/docker/docker/api/types/container"
	gomock "github.com/golang/mock/gomock"
)

// MockDeployer is a mock of Deployer interface.
type MockDeployer struct {
	ctrl     *gomock.Controller
	recorder *MockDeployerMockRecorder
}

// MockDeployerMockRecorder is the mock recorder for MockDeployer.
type MockDeployerMockRecorder struct {
	mock *MockDeployer
}

// NewMockDeployer creates a new mock instance.
func NewMockDeployer(ctrl *gomock.Controller) *MockDeployer {
	mock := &MockDeployer{ctrl: ctrl}
	mock.recorder = &MockDeployerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeployer) EXPECT() *MockDeployerMockRecorder {
	return m.recorder
}

// Attach mocks base method.
func (m *MockDeployer) Attach(containerId string) (types.HijackedResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Attach", containerId)
	ret0, _ := ret[0].(types.HijackedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Attach indicates an expected call of Attach.
func (mr *MockDeployerMockRecorder) Attach(containerId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Attach", reflect.TypeOf((*MockDeployer)(nil).Attach), containerId)
}

// Deploy mocks base method.
func (m *MockDeployer) Deploy(image string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deploy", image)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Deploy indicates an expected call of Deploy.
func (mr *MockDeployerMockRecorder) Deploy(image interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deploy", reflect.TypeOf((*MockDeployer)(nil).Deploy), image)
}

// FindImages mocks base method.
func (m *MockDeployer) FindImages(filter models.ImageFilter) ([]models.ImageSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindImages", filter)
	ret0, _ := ret[0].([]models.ImageSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindImages indicates an expected call of FindImages.
func (mr *MockDeployerMockRecorder) FindImages(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindImages", reflect.TypeOf((*MockDeployer)(nil).FindImages), filter)
}

// GetImage mocks base method.
func (m *MockDeployer) GetImage(lang, os, arch string) (models.ImageSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImage", lang, os, arch)
	ret0, _ := ret[0].(models.ImageSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImage indicates an expected call of GetImage.
func (mr *MockDeployerMockRecorder) GetImage(lang, os, arch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImage", reflect.TypeOf((*MockDeployer)(nil).GetImage), lang, os, arch)
}

// Stop mocks base method.
func (m *MockDeployer) Stop(containerId string, timeout time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", containerId, timeout)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockDeployerMockRecorder) Stop(containerId, timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockDeployer)(nil).Stop), containerId, timeout)
}

// WaitAndRead mocks base method.
func (m *MockDeployer) WaitAndRead(containerId string, condition container.WaitCondition) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitAndRead", containerId, condition)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WaitAndRead indicates an expected call of WaitAndRead.
func (mr *MockDeployerMockRecorder) WaitAndRead(containerId, condition interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitAndRead", reflect.TypeOf((*MockDeployer)(nil).WaitAndRead), containerId, condition)
}

// Write mocks base method.
func (m *MockDeployer) Write(containerId string, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", containerId, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockDeployerMockRecorder) Write(containerId, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockDeployer)(nil).Write), containerId, data)
}

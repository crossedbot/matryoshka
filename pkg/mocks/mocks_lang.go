// Code generated by MockGen. DO NOT EDIT.
// Source: runner/languages/lang.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	languages "github.com/crossedbot/matryoshka/pkg/runner/languages"
	gomock "github.com/golang/mock/gomock"
)

// MockLanguage is a mock of Language interface.
type MockLanguage struct {
	ctrl     *gomock.Controller
	recorder *MockLanguageMockRecorder
}

// MockLanguageMockRecorder is the mock recorder for MockLanguage.
type MockLanguageMockRecorder struct {
	mock *MockLanguage
}

// NewMockLanguage creates a new mock instance.
func NewMockLanguage(ctrl *gomock.Controller) *MockLanguage {
	mock := &MockLanguage{ctrl: ctrl}
	mock.recorder = &MockLanguageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLanguage) EXPECT() *MockLanguageMockRecorder {
	return m.recorder
}

// Build mocks base method.
func (m *MockLanguage) Build(mainFile string, otherFiles ...string) (languages.CommandStreams, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{mainFile}
	for _, a := range otherFiles {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Build", varargs...)
	ret0, _ := ret[0].(languages.CommandStreams)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Build indicates an expected call of Build.
func (mr *MockLanguageMockRecorder) Build(mainFile interface{}, otherFiles ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{mainFile}, otherFiles...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockLanguage)(nil).Build), varargs...)
}

// Run mocks base method.
func (m *MockLanguage) Run(timeout time.Duration) (languages.CommandStreams, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", timeout)
	ret0, _ := ret[0].(languages.CommandStreams)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run.
func (mr *MockLanguageMockRecorder) Run(timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockLanguage)(nil).Run), timeout)
}

// SetPostBuildCommands mocks base method.
func (m *MockLanguage) SetPostBuildCommands(cmd []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPostBuildCommands", cmd)
}

// SetPostBuildCommands indicates an expected call of SetPostBuildCommands.
func (mr *MockLanguageMockRecorder) SetPostBuildCommands(cmd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPostBuildCommands", reflect.TypeOf((*MockLanguage)(nil).SetPostBuildCommands), cmd)
}

// SetPostRunCommands mocks base method.
func (m *MockLanguage) SetPostRunCommands(cmd []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPostRunCommands", cmd)
}

// SetPostRunCommands indicates an expected call of SetPostRunCommands.
func (mr *MockLanguageMockRecorder) SetPostRunCommands(cmd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPostRunCommands", reflect.TypeOf((*MockLanguage)(nil).SetPostRunCommands), cmd)
}

// SetPreBuildCommands mocks base method.
func (m *MockLanguage) SetPreBuildCommands(cmd []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPreBuildCommands", cmd)
}

// SetPreBuildCommands indicates an expected call of SetPreBuildCommands.
func (mr *MockLanguageMockRecorder) SetPreBuildCommands(cmd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPreBuildCommands", reflect.TypeOf((*MockLanguage)(nil).SetPreBuildCommands), cmd)
}

// SetPreRunCommands mocks base method.
func (m *MockLanguage) SetPreRunCommands(cmd []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPreRunCommands", cmd)
}

// SetPreRunCommands indicates an expected call of SetPreRunCommands.
func (mr *MockLanguageMockRecorder) SetPreRunCommands(cmd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPreRunCommands", reflect.TypeOf((*MockLanguage)(nil).SetPreRunCommands), cmd)
}
